# -*- mode:org; ispell-local-dictionary: "spanish" -*-
#+TITLE:     CÃ³digo para el Tuenti Challenge 8
#+AUTHOR:    Almira Molla, Alejandro
#+EMAIL:     aalmiramolla@gmail.com
#+LANGUAGE:  es
#+COLUMNS: %60ITEM(Task) %Effort(E){:} %CLOCKSUM(S) %15DEADLINE %15TAGS
#+STARTUP: overview

* Challenge 1 - Waffle love
#+BEGIN_SRC python :tangle challenge1/challenge1.py
  #!/usr/bin/env python
  # coding: utf-8

  def how_many_squares(line):
      n,m = line.split()
      return ((int(n)-1)*(int(m)-1))

  if __name__=='__main__':
      test_or_submit = 'submit'
      with open(test_or_submit+'Input') as f:
          lines = f.readlines()
          c = map(how_many_squares, lines[1:])
          with open(test_or_submit+'Output', 'w') as r:
              for idx, value in enumerate(c):
                    r.write('Case #{}: {}\n'.format(idx+1,value))
#+END_SRC
* Challenge 2 - Hidden numbers
#+BEGIN_SRC python :tangle challenge2/challenge2.py :results output
  #!/usr/bin/env python3
  # coding: utf-8

  max_number = 'PONMLKJIHGFEDCBA9876543210'
  min_mumber = '1023456789ABCDEFGHIJKLMNOP'

  def difference(line):
      base = len(line)-1

      _max_number = max_number[-base:]
      _min_number = min_mumber[:base]

      decimal_max_number = int(_max_number, base)
      decimal_min_number = int(_min_number, base)

      return decimal_max_number - decimal_min_number


  if __name__=='__main__':
      test_or_submit = 'submit'
      with open(test_or_submit+'Input') as f:
          lines = f.readlines()
          c = map(difference, lines[1:])
          with open(test_or_submit+'Output', 'w') as r:
              for idx, value in enumerate(c):
                  r.write('Case #{}: {}\n'.format(idx+1,value))
#+END_SRC

* Challenge 3 - Scales

Hay que imprimir todas las escalas por las cuales las notas de entrada
pertenecen a dicha escala

#+BEGIN_SRC python :tangle challenge3/challenge3.py
  #!/usr/bin/env python3
  # coding: utf-8
  possible_keys='MA MA# MB MC MC# MD MD# ME MF MF# MG MG# mA mA# mB mC mC# mD mD# mE mF mF# mG mG#'.split()
  piano='C;C#;D;D#;E;F;F#;G;G#;A;A#;B;C'.split(';')
  translate_notes = {
      'E#': 'F',
      'B#': 'C',
      'Cb': 'B',
      'Db': 'C#',
      'Eb': 'D#',
      'Fb': 'E',
      'Gb': 'F#',
      'Ab': 'G#',
      'Bb': 'A#'
      }

  def parse_note(note):
      if note in translate_notes.keys():
          return translate_notes.get(note)
      return note

  def get_scale(note, major_or_minor):
      note_parsed = parse_note(note)
      note_array = [note_parsed]
      scale = 'wwhwwwh' if major_or_minor == 'M' else 'whwwhww'
      for idx, jump in enumerate(scale):
          note_array.append(which_note_reach(note_array[idx], jump))
      return set(note_array)

  def which_note_reach(note, whole_or_half):
      addition = 2 if whole_or_half == 'w' else 1
      index = (piano.index(note)+addition) % (len(piano) - 1)
      return piano[index]

  def get_all_keys(song):
      solution = list(filter(lambda key: 
                             song.issubset(get_scale(key[1:], key[0])),
                             possible_keys))
      return 'None' if not solution else ' '.join(solution)


  def is_number_of_notes_or_notes(line):
      try:
          return int(line)
      except ValueError:
          return None
      return None

  if __name__=='__main__':
      test_or_submit = 'submit'
      with open(test_or_submit+'Input') as f:
          with open(test_or_submit+'Output', 'w') as r:
              lines = f.readlines()[1:]
              counter = 1
              for line in lines:
                  line_notes = []
                  n_notes = is_number_of_notes_or_notes(line)
                  if n_notes == 0:
                      value = ' '.join(possible_keys)
                      r.write('Case #{}: {}\n'.format(counter,value))
                      counter += 1
                  elif not n_notes:
                      for note in line.split():
                          line_notes.append(parse_note(note))
                      line_notes = set(line_notes)
                      value = get_all_keys(line_notes)
                      r.write('Case #{}: {}\n'.format(counter,value))
                      counter += 1

#+END_SRC
* Challenge 4 - Brave Knight
#+BEGIN_SRC python :tangle challenge4/challenge4.py
  #!/usr/bin/env python
  # coding: utf-8

  def how_many_squares(line):
      n,m = line.split()
      return ((int(n)-1)*(int(m)-1))

  if __name__=='__main__':
      test_or_submit = 'test'
      counter = 0
      current_counter = 0
      current_line=2
      with open(test_or_submit+'Input') as f:
          with open(test_or_submit+'Output', 'w') as r:
              lines = f.readlines()[1:]
              for idx, line in enumerate(lines):
                  try:
                      n,m = line.split()
                      current_line = idx + 1
                      counter += 1
                      current_counter = counter
                      print('n {} m {} count {}'.format(n,m, counter))
                  except ValueError:
                      if counter != current_counter:
                          print(lines[current_line:current_line+int(n)])
                          r.write('Case #{}: {}\n'.format(counter,''))
                      #print('is tabletop')
#+END_SRC
